import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Loader2, Brain, AlertTriangle, CheckCircle, MessageSquare, Send, Target, Shield, BookOpen } from "lucide-react";
import { callSecureGeminiAPI } from "@/lib/secureGemini";
import { useToast } from "@/hooks/use-toast";

interface ValidationQuestion {
  id: string;
  label: string;
  required: boolean;
  type: 'text' | 'number' | 'select' | 'boolean';
  options?: string[];
  unit?: string;
  placeholder?: string;
  priority: 'critical' | 'high' | 'medium';
  answer?: string;
}

interface AIResponse {
  answer: string;
  confidence: 'high' | 'medium' | 'low';
  completeness: number; // 0-100%
  validationQuestions?: ValidationQuestion[];
  finalAnswer?: string;
  sources?: string[];
  safetyAlerts?: string[];
}

export default function ImprovedQuickAI() {
  const { toast } = useToast();
  const [question, setQuestion] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<AIResponse | null>(null);
  const [validationQuestions, setValidationQuestions] = useState<ValidationQuestion[]>([]);
  const [showFinalAnswer, setShowFinalAnswer] = useState(false);
  const [showDoctorsModal, setShowDoctorsModal] = useState(false);
  
  // Estado para mostrar o "Conselho M√©dico IA" trabalhando
  const [doctorsWorking, setDoctorsWorking] = useState<{
    drAnalise: { status: 'waiting' | 'working' | 'done', message: string },
    drDiagnostico: { status: 'waiting' | 'working' | 'done', message: string },
    drConduta: { status: 'waiting' | 'working' | 'done', message: string },
    drSeguranca: { status: 'waiting' | 'working' | 'done', message: string }
  }>({
    drAnalise: { status: 'waiting', message: '' },
    drDiagnostico: { status: 'waiting', message: '' },
    drConduta: { status: 'waiting', message: '' },
    drSeguranca: { status: 'waiting', message: '' }
  });
  
  // Sugest√µes r√°pidas para acelerar o processo
  const quickSuggestions = [
    "Dose de paracetamol para crian√ßa de 5 anos e 18kg com febre de 39¬∞C",
    "Posso usar dipirona em gestante de 32 semanas?",
    "Tratamento inicial para HAS 150/90 em paciente de 65 anos",
    "Antibi√≥tico para ITU em mulher de 25 anos sem comorbidades"
  ];

  // SISTEMA MULTI-AGENT - "CONSELHO M√âDICO IA"
  const multiAgentSystem = {
    // "DR. COMPLETUDE" - Especialista em An√°lise de Dados
    completenessAgent: (question: string) => `
ESPECIALISTA EM COMPLETUDE DE DADOS M√âDICOS - "DR. COMPLETUDE"

MISS√ÉO: Analisar RIGOROSAMENTE se esta pergunta tem dados suficientes para resposta m√©dica segura.

PERGUNTA: "${question}"

DETEC√á√ÉO AUTOM√ÅTICA DE CONTEXTO:
${question.toLowerCase().includes('crian√ßa') || question.toLowerCase().includes('pediatr') ? `
üßí CONTEXTO: PEDIATRIA DETECTADA
DADOS CR√çTICOS OBRIGAT√ìRIOS: peso, idade espec√≠fica, alergias
CRIT√âRIO RIGOROSO: Sem peso = M√ÅXIMO 50% completude
` : ''}
${question.toLowerCase().includes('gestante') || question.toLowerCase().includes('gr√°vida') || question.toLowerCase().includes('gesta√ß√£o') ? `
ü§± CONTEXTO: GESTA√á√ÉO DETECTADA  
DADOS CR√çTICOS OBRIGAT√ìRIOS: idade gestacional, trimestre
CRIT√âRIO RIGOROSO: Sem IG = M√ÅXIMO 40% completude
` : ''}
${question.toLowerCase().includes('idoso') || /\d+\s*anos/.test(question) && parseInt(question.match(/(\d+)\s*anos/)?.[1] || '0') >= 65 ? `
üë¥ CONTEXTO: GERIATRIA DETECTADA
DADOS CR√çTICOS OBRIGAT√ìRIOS: fun√ß√£o renal, comorbidades, medica√ß√µes
CRIT√âRIO RIGOROSO: Sem creatinina = M√ÅXIMO 60% completude
` : ''}

AN√ÅLISE ULTRA-RIGOROSA:
1. DADOS PRESENTES: [Listar cada dado espec√≠fico encontrado]
2. DADOS CR√çTICOS AUSENTES: [Listar o que falta para seguran√ßa]
3. N√çVEL DE RISCO: [Alto/M√©dio/Baixo se responder sem dados faltantes]

SCORE DE COMPLETUDE: __/100

DECIS√ÉO CR√çTICA:
- Se ‚â•85%: "APROVADO PARA RESPOSTA DIRETA"
- Se <85%: "REQUER VALIDA√á√ÉO - dados insuficientes para seguran√ßa"

RESPONDA APENAS EM JSON:
{
  "completeness": [0-100],
  "contexto": "pediatria/gestacao/geriatria/adulto",
  "dadosPresentes": ["lista"],
  "dadosCriticosFaltando": ["lista"],
  "nivelRisco": "alto/medio/baixo",
  "decisao": "aprovado/requer_validacao"
}
`,

    // "DR. PERGUNTAS" - Especialista em Formula√ß√£o de Quest√µes
    questionAgent: (question: string, missingData: string[], context: string) => `
ESPECIALISTA EM FORMULA√á√ÉO DE PERGUNTAS M√âDICAS - "DR. PERGUNTAS"

MISS√ÉO: Formular perguntas CIR√öRGICAS e ESPEC√çFICAS para obter dados cr√≠ticos.

PERGUNTA ORIGINAL: "${question}"
CONTEXTO DETECTADO: ${context}
DADOS CR√çTICOS FALTANDO: ${missingData.join(', ')}

DIRETRIZES PARA PERGUNTAS INTELIGENTES:
${context === 'pediatria' ? `
PEDIATRIA - Prioridades:
1. Peso (CR√çTICO para doses)
2. Idade espec√≠fica em meses/anos
3. Sintomas espec√≠ficos (temperatura exata, dura√ß√£o)
4. Alergias medicamentosas conhecidas
` : ''}
${context === 'gestacao' ? `
GESTA√á√ÉO - Prioridades:  
1. Idade gestacional exata (semanas)
2. Trimestre espec√≠fico
3. Comorbidades gestacionais
4. Medica√ß√µes em uso
` : ''}
${context === 'geriatria' ? `
GERIATRIA - Prioridades:
1. Fun√ß√£o renal (creatinina/clearance)
2. Comorbidades espec√≠ficas
3. Medica√ß√µes em uso (polifarm√°cia)
4. Cogni√ß√£o/capacidade decis√≥ria
` : ''}

INSTRU√á√ïES:
- M√ÅXIMO 5 perguntas
- Linguagem CLARA e DIRETA
- Priorizar CR√çTICAS primeiro
- Usar tipos espec√≠ficos (number/select/text)

RESPONDA EM JSON:
{
  "validationQuestions": [
    {
      "id": "id_unico",
      "label": "Pergunta espec√≠fica e direta",
      "required": true/false,
      "type": "number/text/select",
      "unit": "unidade_se_aplicavel",
      "options": ["se_for_select"],
      "priority": "critical/high/medium"
    }
  ]
}
`,

    // "DR. M√âDICO" - Especialista em Condutas Cl√≠nicas
    medicalAgent: (question: string, validatedData: any) => `
ESPECIALISTA M√âDICO EM CONDUTAS CL√çNICAS - "DR. M√âDICO"

MISS√ÉO: Fornecer conduta m√©dica ULTRA-PRECISA baseada nos dados validados.

PERGUNTA: "${question}"
DADOS VALIDADOS: ${JSON.stringify(validatedData)}

CHAIN OF THOUGHT EXPL√çCITO:
Pense em voz alta sobre:

1. AN√ÅLISE DO CASO:
"Este √© um caso de [especialidade]. O paciente tem [caracter√≠sticas]. A condi√ß√£o √© [gravidade]."

2. CONSIDERA√á√ïES CR√çTICAS:
"Dados cr√≠ticos: [listar]. Fatores de risco: [listar]. Contraindica√ß√µes: [verificar]."

3. RACIOC√çNIO TERAP√äUTICO:
"Para este perfil, primeira linha seria [medicamento] porque [justificativa]. Dose calculada: [c√°lculo]."

4. SEGURAN√áA:
"Monitorar [par√¢metros]. Alertas: [espec√≠ficos]. Seguimento: [quando]."

ESTRUTURA DA RESPOSTA:
- Conduta espec√≠fica com justificativa
- C√°lculos detalhados (doses, intervalos)
- Alertas de monitoramento espec√≠ficos
- Contraindica√ß√µes relevantes
- Esta √© orienta√ß√£o de aux√≠lio. Decis√£o final √© do m√©dico.

FONTES REAIS CONSULTADAS:
Liste APENAS fontes que voc√™ realmente baseou esta resposta espec√≠fica.

RESPONDA EM JSON:
{
  "answer": "Resposta m√©dica completa com chain of thought",
  "confidence": "high",
  "sources": ["fontes reais consultadas"],
  "safetyAlerts": ["alertas espec√≠ficos"]
}
`,

    // "DR. VALIDADOR" - Sistema de Auto-Corre√ß√£o
    validatorAgent: (originalQuestion: string, response: string) => `
VALIDADOR M√âDICO FINAL - "DR. VALIDADOR"

MISS√ÉO: Revisar e validar resposta m√©dica antes de enviar ao plantonista.

PERGUNTA ORIGINAL: "${originalQuestion}"
RESPOSTA A VALIDAR: "${response}"

CHECKLIST DE VALIDA√á√ÉO CR√çTICA:

‚úÖ PRECIS√ÉO M√âDICA:
- A resposta est√° baseada em diretrizes oficiais?
- Os c√°lculos de dose est√£o corretos?
- As contraindica√ß√µes foram consideradas?

‚úÖ SEGURAN√áA DO PACIENTE:
- A conduta √© conservadora?
- Os alertas de monitoramento s√£o adequados?
- H√° riscos n√£o mencionados?

‚úÖ APLICABILIDADE PR√ÅTICA:
- O plantonista pode executar esta conduta?
- As informa√ß√µes s√£o claras e espec√≠ficas?
- Falta algum detalhe importante?

‚úÖ RESPONSABILIDADE M√âDICA:
- Est√° claro que √© orienta√ß√£o de aux√≠lio?
- As limita√ß√µes foram mencionadas?
- A necessidade de reavalia√ß√£o foi indicada?

DECIS√ÉO FINAL:
Se encontrar QUALQUER problema: "REPROVAR - [motivo]"
Se estiver perfeito: "VALIDADO - resposta aprovada"

Se reprovar, forne√ßa a VERS√ÉO CORRIGIDA.
`
  };

  const generateOptimizedPrompt = (userQuestion: string) => `
SISTEMA QUICK AI - ASSIST√äNCIA M√âDICA ULTRA-PRECISA

MISS√ÉO: Fornecer orienta√ß√£o m√©dica com precis√£o pr√≥xima a 100% atrav√©s de valida√ß√£o inteligente.

PERGUNTA: ${userQuestion}

PROTOCOLO DE PRECIS√ÉO ULTRA-RIGOROSO:

AN√ÅLISE DE COMPLETUDE (0-100%):
Para CADA pergunta, avalie RIGOROSAMENTE:

1. DADOS DEMOGR√ÅFICOS ESSENCIAIS:
   - Idade ESPEC√çFICA (n√£o apenas "idoso", "crian√ßa")
   - Peso (essencial para doses)
   - Sexo (quando relevante)

2. DADOS CL√çNICOS CR√çTICOS:
   - Valores EXATOS (PA, glicemia, laborat√≥rios)
   - Fun√ß√£o renal (creatinina/clearance)
   - Comorbidades espec√≠ficas
   - Medica√ß√µes em uso

3. CONTEXTO M√âDICO COMPLETO:
   - Gravidade/urg√™ncia
   - Dura√ß√£o dos sintomas
   - Tentativas terap√™uticas pr√©vias
   - Alergias medicamentosas

CRIT√âRIO RIGOROSO: SE FALTAR QUALQUER DADO CR√çTICO = COMPLETUDE < 80%

EXEMPLOS DE AN√ÅLISE RIGOROSA:

‚ùå VAGA (< 80%): "HAS em idoso"
FALTA: idade espec√≠fica, valores PA, fun√ß√£o renal, comorbidades

‚ùå VAGA (< 80%): "Antibi√≥tico para pneumonia"  
FALTA: idade, gravidade, pat√≥geno, local interna√ß√£o, comorbidades

‚úÖ COMPLETA (‚â• 80%): "HAS 150/90 em homem 67 anos, creatinina 1.1, sem comorbidades"
TEM: idade espec√≠fica, PA exata, fun√ß√£o renal, contexto cl√≠nico

REGRA DE OURO: SEJA EXTREMAMENTE RIGOROSO. Na d√∫vida, SEMPRE gerar valida√ß√£o.

DIRETRIZES OBRIGAT√ìRIAS:
‚Ä¢ Seguir ESTRITAMENTE: SBP, SBC, SBD, ANVISA, Minist√©rio da Sa√∫de
‚Ä¢ Abordagem CONSERVADORA - nunca agressiva
‚Ä¢ Considerar SEMPRE risco-benef√≠cio
‚Ä¢ Admitir limita√ß√µes quando n√£o souber
‚Ä¢ SEMPRE incluir: "Esta √© orienta√ß√£o de aux√≠lio. Decis√£o final √© do m√©dico."

FONTES OBRIGAT√ìRIAS:
‚Ä¢ SEMPRE listar no campo "sources" as fontes REAIS que voc√™ consultou
‚Ä¢ N√ÉO inventar fontes - usar apenas as que voc√™ realmente baseou sua resposta
‚Ä¢ Exemplos: "SBC - Diretrizes de Hipertens√£o 2020", "ANVISA - Bul√°rio do Enalapril"

CRIT√âRIOS ESPEC√çFICOS ATUALIZADOS:
‚Ä¢ Diabetes: Insulina inicial apenas se HbA1c >9% + sintomas OU glicemia ‚â•300mg/dL
‚Ä¢ Hipertens√£o: Monoterapia inicial (IECA/BRA preferred)
‚Ä¢ Antibi√≥ticos: Apenas com evid√™ncia infecciosa clara
‚Ä¢ Pediatria: Sempre calcular por peso (mg/kg)
‚Ä¢ Gesta√ß√£o: Sempre verificar categoria FDA/ANVISA
‚Ä¢ Idosos: Ajustar dose para clearance renal

FORMATO OBRIGAT√ìRIO:

Para ALTA COMPLETUDE (‚â•85%):
{
  "answer": "Resposta detalhada baseada em diretrizes. N√ÉO incluir fontes no texto da resposta.",
  "confidence": "high",
  "completeness": 90,
  "sources": ["SEMPRE listar as fontes REAIS que voc√™ consultou para esta resposta espec√≠fica"],
  "safetyAlerts": ["Verificar fun√ß√£o renal", "Monitorar glicemia"]
}

Para BAIXA COMPLETUDE (<80%):
{
  "answer": "An√°lise inicial com dados dispon√≠veis. Para resposta PRECISA e SEGURA, preciso de informa√ß√µes cr√≠ticas:",
  "confidence": "medium",
  "completeness": [PORCENTAGEM_REAL],
  "validationQuestions": [
    {
      "id": "unique_id",
      "label": "PERGUNTA ESPEC√çFICA baseada no que falta",
      "required": true/false,
      "type": "number/text/select",
      "unit": "unidade_se_aplic√°vel", 
      "options": ["se_for_select"],
      "priority": "critical/high/medium"
    }
  ]
}

INSTRU√á√ïES PARA PERGUNTAS DIN√ÇMICAS:
- CADA pergunta deve ser ESPEC√çFICA para o caso
- PRIORIZAR dados CR√çTICOS primeiro
- M√ÅXIMO 5 perguntas por vez
- USAR linguagem CLARA e DIRETA

REGRA OURO: Na d√∫vida sobre completude, SEMPRE gerar perguntas de valida√ß√£o. √â melhor pedir mais informa√ß√µes do que dar resposta imprecisa.
`;

  // ORQUESTRADOR MULTI-AGENT - Faz as "IAs" conversarem
  const orchestrateMultiAgent = async (question: string) => {
    try {
      // ETAPA 1: üß† DR. AN√ÅLISE trabalhando
      setDoctorsWorking(prev => ({
        ...prev,
        drAnalise: { status: 'working', message: 'Analisando completude de dados cl√≠nicos...' }
      }));
      
      const completenessResponse = await callSecureGeminiAPI({ 
        prompt: multiAgentSystem.completenessAgent(question), 
        context: 'emergency' 
      });
      
      if (!completenessResponse.success) {
        throw new Error('Erro na an√°lise de completude');
      }

      // Parse da an√°lise de completude
      const completenessMatch = completenessResponse.response.trim().match(/\{[\s\S]*\}/);
      let completenessData;
      
      try {
        if (completenessMatch) {
          completenessData = JSON.parse(completenessMatch[0]);
        }
      } catch (parseError) {
        console.error('Erro no parse da an√°lise de completude');
        // Fallback para an√°lise tradicional
        return await fallbackTraditionalAnalysis(question);
      }

      // üß† DR. AN√ÅLISE conclu√≠do
      setDoctorsWorking(prev => ({
        ...prev,
        drAnalise: { 
          status: 'done', 
          message: `${completenessData?.contexto?.toUpperCase() || 'ADULTO'} detectado - Completude: ${completenessData?.completeness || 50}%` 
        }
      }));

      // DECIS√ÉO: Precisa de valida√ß√£o ou pode responder?
      if (completenessData?.decisao === 'requer_validacao') {
        
        // ETAPA 2: üéØ DR. DIAGN√ìSTICO trabalhando
        setDoctorsWorking(prev => ({
          ...prev,
          drDiagnostico: { status: 'working', message: 'Formulando perguntas cl√≠nicas espec√≠ficas...' }
        }));
        
        const questionsResponse = await callSecureGeminiAPI({
          prompt: multiAgentSystem.questionAgent(
            question, 
            completenessData.dadosCriticosFaltando || [], 
            completenessData.contexto || 'adulto'
          ),
          context: 'emergency'
        });

        if (!questionsResponse.success) {
          throw new Error('Erro na formula√ß√£o de perguntas');
        }

        // Parse das perguntas
        const questionsMatch = questionsResponse.response.trim().match(/\{[\s\S]*\}/);
        let questionsData;
        
        try {
          if (questionsMatch) {
            questionsData = JSON.parse(questionsMatch[0]);
          }
        } catch (parseError) {
          console.error('Erro no parse das perguntas');
          throw new Error('Erro na formula√ß√£o de perguntas');
        }

        // üéØ DR. DIAGN√ìSTICO conclu√≠do
        setDoctorsWorking(prev => ({
          ...prev,
          drDiagnostico: { 
            status: 'done', 
            message: `${questionsData?.validationQuestions?.length || 0} perguntas cl√≠nicas formuladas` 
          },
          drConduta: { 
            status: 'done', 
            message: 'Aguardando dados para elaborar conduta m√©dica precisa' 
          },
          drSeguranca: { 
            status: 'done', 
            message: 'Protocolos de seguran√ßa ativados' 
          }
        }));

        // Retorna resultado com perguntas de valida√ß√£o
        return {
          answer: `üè• CONSELHO M√âDICO IA: ${completenessData.contexto.toUpperCase()} detectado. Para conduta ULTRA-PRECISA, nossos especialistas precisam de dados cr√≠ticos adicionais.`,
          confidence: 'medium',
          completeness: completenessData.completeness || 50,
          validationQuestions: questionsData?.validationQuestions || [],
          sources: [],
          needsValidation: true
        };

      } else {
        // ETAPA 3: üë®‚Äç‚öïÔ∏è DR. CONDUTA trabalhando
        setDoctorsWorking(prev => ({
          ...prev,
          drConduta: { status: 'working', message: 'Elaborando conduta m√©dica baseada em evid√™ncias...' }
        }));
        
        const medicalResponse = await callSecureGeminiAPI({
          prompt: multiAgentSystem.medicalAgent(question, { perguntaCompleta: true }),
          context: 'emergency'
        });

        if (!medicalResponse.success) {
          throw new Error('Erro na resposta m√©dica');
        }

        // Parse da resposta m√©dica
        const medicalMatch = medicalResponse.response.trim().match(/\{[\s\S]*\}/);
        let medicalData;
        
        try {
          if (medicalMatch) {
            medicalData = JSON.parse(medicalMatch[0]);
          } else {
            // Se n√£o vier JSON, usar resposta como texto
            medicalData = {
              answer: medicalResponse.response,
              confidence: 'high',
              sources: [],
              safetyAlerts: []
            };
          }
        } catch (parseError) {
          medicalData = {
            answer: medicalResponse.response,
            confidence: 'high', 
            sources: [],
            safetyAlerts: []
          };
        }

        // üë®‚Äç‚öïÔ∏è DR. CONDUTA conclu√≠do
        setDoctorsWorking(prev => ({
          ...prev,
          drConduta: { status: 'done', message: 'Conduta m√©dica elaborada com chain of thought' }
        }));

        // ETAPA 4: ‚úÖ DR. SEGURAN√áA validando
        setDoctorsWorking(prev => ({
          ...prev,
          drSeguranca: { status: 'working', message: 'Validando seguran√ßa e protocolos m√©dicos...' }
        }));
        
        const validationResponse = await callSecureGeminiAPI({
          prompt: multiAgentSystem.validatorAgent(question, medicalData.answer),
          context: 'emergency'
        });

        // Se valida√ß√£o reprovar, usar vers√£o corrigida
        let finalMessage = 'Protocolos de seguran√ßa aprovados - Resposta validada';
        if (validationResponse.success && validationResponse.response.includes('REPROVAR')) {
          const correctedAnswer = validationResponse.response.split('VERS√ÉO CORRIGIDA:')[1] || medicalData.answer;
          medicalData.answer = correctedAnswer.trim();
          finalMessage = 'Corre√ß√µes de seguran√ßa aplicadas';
        }

        // ‚úÖ DR. SEGURAN√áA conclu√≠do
        setDoctorsWorking(prev => ({
          ...prev,
          drSeguranca: { status: 'done', message: finalMessage }
        }));

        return {
          answer: medicalData.answer,
          confidence: 'high',
          completeness: completenessData.completeness || 90,
          sources: medicalData.sources || [],
          safetyAlerts: medicalData.safetyAlerts || [],
          needsValidation: false
        };
      }

    } catch (error) {
      console.error('Erro no sistema multi-agent:', error);
      // Fallback para an√°lise tradicional
      return await fallbackTraditionalAnalysis(question);
    }
  };

  // Fallback para o sistema tradicional em caso de erro
  const fallbackTraditionalAnalysis = async (question: string) => {
    const prompt = generateOptimizedPrompt(question);
    const response = await callSecureGeminiAPI({ prompt, context: 'emergency' });
    
    if (!response.success) {
      throw new Error(response.error || 'Erro na comunica√ß√£o com a IA');
    }
    
    const jsonMatch = response.response.trim().match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    return {
      answer: response.response,
      confidence: 'medium',
      completeness: 70,
      sources: [],
      safetyAlerts: []
    };
  };

  const generateQuickResponse = async () => {
    if (!question.trim()) {
      toast({
        title: "Erro",
        description: "Por favor, fa√ßa uma pergunta m√©dica.",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    setAiResponse(null);
    setValidationQuestions([]);
    setShowFinalAnswer(false);
    setShowDoctorsModal(true); // Abrir modal dos doutores
    
    // Resetar estado dos doutores
    setDoctorsWorking({
      drAnalise: { status: 'waiting', message: '' },
      drDiagnostico: { status: 'waiting', message: '' },
      drConduta: { status: 'waiting', message: '' },
      drSeguranca: { status: 'waiting', message: '' }
    });

    try {
      // USAR SISTEMA MULTI-AGENT
      const multiAgentResult = await orchestrateMultiAgent(question);
      
      setAiResponse({
        answer: multiAgentResult.answer,
        confidence: multiAgentResult.confidence as 'high' | 'medium' | 'low',
        completeness: multiAgentResult.completeness,
        sources: multiAgentResult.sources,
        safetyAlerts: multiAgentResult.safetyAlerts,
        validationQuestions: multiAgentResult.validationQuestions
      });
      
      if (multiAgentResult.validationQuestions && multiAgentResult.validationQuestions.length > 0) {
            // Ordenar por prioridade
        const sortedQuestions = multiAgentResult.validationQuestions.sort((a, b) => {
              const priorityOrder = { critical: 0, high: 1, medium: 2 };
              return priorityOrder[a.priority] - priorityOrder[b.priority];
            });
            setValidationQuestions(sortedQuestions);
      }
      
    } catch (error) {
      console.error('Erro ao gerar resposta:', error);
      setAiResponse({
        answer: 'Erro ao processar sua pergunta. Tente reformular ou seja mais espec√≠fico.',
        confidence: 'low',
        completeness: 0,
        safetyAlerts: ['Sistema temporariamente indispon√≠vel']
      });
    } finally {
      setIsLoading(false);
      
      // Fechar modal ap√≥s 2 segundos para mostrar resultado final
      setTimeout(() => {
        setShowDoctorsModal(false);
      }, 2000);
    }
  };

  const handleValidationAnswer = (id: string, answer: string) => {
    setValidationQuestions(prev => 
      prev.map(q => q.id === id ? { ...q, answer } : q)
    );
  };

  const generateFinalAnswer = async () => {
    if (!aiResponse) return;

    const unansweredCritical = validationQuestions.filter(
      q => q.priority === 'critical' && q.required && (!q.answer || !q.answer.trim())
    );
    
    const unansweredHigh = validationQuestions.filter(
      q => q.priority === 'high' && q.required && (!q.answer || !q.answer.trim())
    );

    if (unansweredCritical.length > 0) {
      toast({
        title: "Informa√ß√µes Cr√≠ticas Necess√°rias",
        description: `Responda as perguntas cr√≠ticas (${unansweredCritical.length}) para garantir precis√£o m√°xima.`,
        variant: "destructive"
      });
      return;
    }

    if (unansweredHigh.length > 0) {
      toast({
        title: "Aten√ß√£o - Informa√ß√µes Importantes",
        description: `${unansweredHigh.length} pergunta(s) de alta prioridade n√£o respondida(s). Isso pode afetar a precis√£o.`,
        variant: "default"
      });
    }

    setIsLoading(true);
    setShowDoctorsModal(true); // Abrir modal para resposta final

    try {
      const answeredQuestions = validationQuestions.filter(q => q.answer?.trim());
      
      const finalPrompt = `
GERA√á√ÉO DE RESPOSTA FINAL ULTRA-PRECISA

PERGUNTA ORIGINAL: ${question}
RESPOSTA INICIAL: ${aiResponse.answer}

INFORMA√á√ïES VALIDADAS:
${answeredQuestions.map(q => `‚Ä¢ ${q.label}: ${q.answer} [${q.priority.toUpperCase()}]`).join('\n')}

INSTRU√á√ïES PARA RESPOSTA FINAL:
1. INTEGRAR todas as informa√ß√µes validadas
2. AJUSTAR recomenda√ß√µes baseado nos novos dados
3. CALCULAR doses exatas quando aplic√°vel
4. INCLUIR alertas de seguran√ßa espec√≠ficos
5. CITAR fontes oficiais relevantes
6. MANTER abordagem conservadora

ESTRUTURA OBRIGAT√ìRIA:
‚Ä¢ Conduta espec√≠fica baseada nas informa√ß√µes fornecidas
‚Ä¢ C√°lculos detalhados (doses, intervalos)
‚Ä¢ Alertas de monitoramento
‚Ä¢ Contraindica√ß√µes relevantes
‚Ä¢ "Esta √© orienta√ß√£o de aux√≠lio. Decis√£o final √© do m√©dico."

IMPORTANTE: N√ÉO incluir fontes no texto da resposta. As fontes devem vir no campo 'sources' do JSON.

RESPOSTA FINAL DEVE SER UM JSON:
{
  "finalAnswer": "Texto da resposta sem fontes",
  "sources": ["LISTAR APENAS as fontes REAIS que voc√™ consultou para esta resposta espec√≠fica"],
  "confidence": "high"
}

FOCO: Precis√£o m√°xima, seguran√ßa do paciente, praticidade para o plantonista.
`;

      const finalResponse = await callSecureGeminiAPI({ 
        prompt: finalPrompt, 
        context: 'emergency' 
      });
      
      if (!finalResponse.success) {
        throw new Error(finalResponse.error || "Erro na resposta final");
      }
      
      // Tentar fazer parse do JSON da resposta final
      let finalData;
      try {
        const jsonMatch = finalResponse.response.trim().match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          finalData = JSON.parse(jsonMatch[0]);
        }
      } catch (parseError) {
        console.log('Resposta final n√£o √© JSON, usando como texto');
      }
      
      setAiResponse(prev => prev ? { 
        ...prev, 
        finalAnswer: finalData?.finalAnswer || finalResponse.response,
        confidence: 'high',
        completeness: 95,
        // Usar fontes da resposta final se existirem, sen√£o manter originais
        sources: finalData?.sources || prev.sources || [],
        safetyAlerts: prev.safetyAlerts || []
      } : null);
      setShowFinalAnswer(true);
      
      toast({
        title: "Resposta Final Gerada",
        description: "Resposta com alta precis√£o baseada nas informa√ß√µes fornecidas.",
        variant: "default"
      });
      
    } catch (error) {
      console.error('Erro na resposta final:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel gerar resposta final. Tente novamente.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
      
      // Fechar modal ap√≥s 2 segundos para mostrar resultado final
      setTimeout(() => {
        setShowDoctorsModal(false);
      }, 2000);
    }
  };

  const getConfidenceColor = (confidence: string) => {
    switch (confidence) {
      case 'high': return 'bg-green-100 text-green-800 border-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical': return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'high': return <Shield className="w-4 h-4 text-orange-500" />;
      case 'medium': return <BookOpen className="w-4 h-4 text-blue-500" />;
      default: return null;
    }
  };

  // Fun√ß√£o para converter markdown b√°sico para HTML
  const formatText = (text: string) => {
    if (!text) return '';
    
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code className="bg-gray-100 px-1 py-0.5 rounded text-sm">$1</code>')
      // Trocar TODAS as ocorr√™ncias de * por - para listas mais bonitas
      .replace(/^\s*\*\s+/gm, '- ')
      .replace(/\n\s*\*\s+/g, '\n- ')
      .replace(/\*\s+([A-Z])/g, '- $1')
      .replace(/\n/g, '<br />');
  };

  // Fun√ß√£o para detectar perguntas vagas automaticamente
  const detectVagueQuestion = (question: string) => {
    const lowerQuestion = question.toLowerCase();
    
    // Padr√µes que indicam pergunta vaga
    const vaguePatterns = [
      // Medicamento + "para" + sintoma gen√©rico
      /\b(paracetamol|dipirona|amoxicilina|azitromicina|tansulosina|omeprazol)\b.*\bpara\b.*\b(febre|c√≥lica|dor|infec√ß√£o|gastrite)\b/i,
      
      // Antibi√≥ticos sem especificar infec√ß√£o
      /\b(antibiotic|antibi√≥tico)\b.*\bpara\b.*\b(infec√ß√£o|bact√©ria)\b/i,
      
      // Doses pedi√°tricas sem peso
      /\b(dose|posso usar)\b.*\b(paracetamol|dipirona|antibiotic|antibi√≥tico)\b.*\b(crian√ßa|pediatr|anos?)\b(?!.*\b\d+\s*kg\b)/i,
      
      // Gestantes sem idade gestacional
      /\b(gestante|gr√°vida|gesta√ß√£o)\b.*\b(medicamento|medicamento|posso usar)\b(?!.*\b(1¬™|2¬™|3¬™|primeiro|segundo|terceiro|semanas?)\b)/i,
      
      // Idosos sem fun√ß√£o renal
      /\b(idoso|idosos|65|70|80)\b.*\b(anos?)\b.*\b(medicamento|posso usar)\b(?!.*\b(creatinina|clearance|renal)\b)/i
    ];
    
    // Verificar se a pergunta se encaixa em algum padr√£o vago
    const isVague = vaguePatterns.some(pattern => pattern.test(question));
    
    if (isVague) {
      return {
        isVague: true,
        suggestions: [
          "Para resposta precisa, preciso saber:",
          "‚Ä¢ Peso da crian√ßa (se pedi√°trico)",
          "‚Ä¢ Idade gestacional (se gestante)", 
          "‚Ä¢ Fun√ß√£o renal (se idoso)",
          "‚Ä¢ Tipo espec√≠fico de infec√ß√£o/condi√ß√£o",
          "‚Ä¢ Comorbidades e alergias"
        ]
      };
    }
    
    return { isVague: false, suggestions: [] };
  };

  const renderValidationInput = (question: ValidationQuestion) => {
    switch (question.type) {
      case 'select':
        return (
          <Select 
            value={question.answer || ''} 
            onValueChange={(value) => handleValidationAnswer(question.id, value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Selecione uma op√ß√£o..." />
            </SelectTrigger>
            <SelectContent>
              {question.options?.map(option => (
                <SelectItem key={option} value={option}>{option}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      
      case 'number':
        return (
          <div className="flex items-center space-x-2">
            <Input
              type="number"
              placeholder={question.placeholder || "Digite o valor..."}
              value={question.answer || ''}
              onChange={(e) => handleValidationAnswer(question.id, e.target.value)}
            />
            {question.unit && (
              <Badge variant="outline">{question.unit}</Badge>
            )}
          </div>
        );
      
      default:
        return (
          <Input
            placeholder={question.placeholder || "Digite sua resposta..."}
            value={question.answer || ''}
            onChange={(e) => handleValidationAnswer(question.id, e.target.value)}
          />
        );
    }
  };

  return (
    <>
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader className="bg-gradient-to-r from-purple-50 to-blue-50 p-6">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl flex items-center gap-3">
            <Brain className="w-6 h-6 text-purple-600" />
            DocPilot AI - Assist√™ncia Ultra-Precisa
            <Badge variant="secondary" className="bg-purple-100 text-purple-800">
              <Target className="w-3 h-3 mr-1" />
              ~100% Precis√£o
            </Badge>
            <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
              üîÑ Multi-Agent Real
            </Badge>
          </CardTitle>
        </div>
      </CardHeader>

      <CardContent className="p-6">
        <div className="space-y-6">
          {/* Junta M√©dica de Especialistas IA */}
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg border border-blue-200 mb-4">
            <div className="flex items-start gap-3">
              <div className="text-2xl">ü§ñ</div>
              <div className="flex-1">
                <h4 className="font-semibold text-sm text-blue-800 mb-2">A.I.V.A - Junta M√©dica de 4 Especialistas IA</h4>
                <p className="text-xs text-blue-700 mb-3">
                  Cada consulta √© analisada por nossa equipe AIVA de 4 m√©dicos virtuais especializados trabalhando em conjunto:
                </p>
                <div className="space-y-1 text-xs text-blue-600">
                  <div>üß† <strong>DR. AN√ÅLISE</strong> - Avalia completude dos dados cl√≠nicos</div>
                  <div>üîç <strong>DR. INVESTIGA√á√ÉO</strong> - Formula questionamentos m√©dicos espec√≠ficos</div>
                  <div>üë®‚Äç‚öïÔ∏è <strong>DR. VALIDA√á√ÉO</strong> - Elabora protocolo de tratamento baseado em evid√™ncias</div>
                  <div>‚úÖ <strong>DR. AUDITORIA</strong> - Revisa e valida todas as recomenda√ß√µes antes do envio</div>
                </div>
                <p className="text-xs text-blue-600 mt-3 italic font-medium">
                  Sistema de consenso m√©dico com valida√ß√£o cruzada para m√°xima precis√£o e seguran√ßa do paciente.
                </p>
              </div>
            </div>
          </div>

          {/* Sugest√µes R√°pidas */}
          <div>
            <Label className="text-sm font-medium mb-2 block">üí° Sugest√µes r√°pidas:</Label>
            <div className="flex flex-wrap gap-2">
              {quickSuggestions.map((suggestion, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => setQuestion(suggestion)}
                  className="text-xs"
                >
                  {suggestion}
                </Button>
              ))}
            </div>
          </div>

          {/* Input Principal */}
          <div>
            <Label htmlFor="question" className="text-sm font-medium flex items-center gap-2">
              <MessageSquare className="w-4 h-4" />
              Consulte a Junta M√©dica A.I.V.A (seja espec√≠fico para maior precis√£o):
            </Label>
            <Textarea
              id="question"
              placeholder="Ex: Qual a dose de paracetamol para uma crian√ßa de 5 anos e 18kg com febre de 39¬∞C?"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="mt-2"
              rows={4}
            />
          </div>

          {/* Bot√£o Principal */}
          <Button 
            onClick={generateQuickResponse}
            disabled={isLoading || !question.trim()}
            className="w-full bg-purple-600 hover:bg-purple-700"
            size="lg"
          >
            {isLoading ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                Analisando com IA...
              </>
            ) : (
              <>
                <Brain className="w-5 h-5 mr-2" />
                Analisar com A.I.V.A
              </>
            )}
          </Button>



          {/* Resposta da IA */}
          {aiResponse && (
            <div className="space-y-4">
              {/* M√©tricas da Resposta */}
              <div className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <Badge className={getConfidenceColor(aiResponse.confidence)}>
                  Confian√ßa: {aiResponse.confidence.toUpperCase()}
                </Badge>
                <Badge variant="outline">
                  Completude: {aiResponse.completeness}%
                </Badge>
                {aiResponse.sources && (
                  <Badge variant="secondary">
                    <BookOpen className="w-3 h-3 mr-1" />
                    {aiResponse.sources.length} fonte(s)
                  </Badge>
                )}
              </div>

              {/* Resposta Inicial */}
              <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                  <Brain className="w-4 h-4 text-blue-600" />
                  {aiResponse.completeness < 85 ? '‚ö†Ô∏è Pergunta Vaga - Preciso de Mais Informa√ß√µes:' : 'An√°lise Inicial:'}
                </h4>
                <div className="text-sm whitespace-pre-line" dangerouslySetInnerHTML={{ __html: formatText(aiResponse.answer) }} />
                
                {/* Aviso para perguntas vagas */}
                {aiResponse.completeness < 85 && (
                  <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-800">
                    <strong>üí° Dica:</strong> Para respostas mais precisas, seja espec√≠fico incluindo: peso, idade, comorbidades, alergias e contexto cl√≠nico detalhado.
                </div>
                )}
                
                {/* Fontes */}
                {aiResponse.sources && aiResponse.sources.length > 0 && (
                  <div className="mt-3 pt-3 border-t border-blue-200">
                    <div className="text-xs text-blue-700 font-medium mb-1">
                      Fontes:
                    </div>
                    <div className="text-xs text-blue-600">
                      {aiResponse.sources.join(' ‚Ä¢ ')}
                    </div>
                  </div>
                )}
              </div>

              {/* Alertas de Seguran√ßa */}
              {aiResponse.safetyAlerts && aiResponse.safetyAlerts.length > 0 && (
                <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <div className="flex items-center gap-2 text-orange-800 font-medium text-sm mb-2">
                    <AlertTriangle className="w-4 h-4" />
                    Alertas de Seguran√ßa:
                  </div>
                  <ul className="text-sm text-orange-700 space-y-1">
                    {aiResponse.safetyAlerts.map((alert, index) => (
                      <li key={index}>‚Ä¢ {alert}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Perguntas de Valida√ß√£o */}
              {validationQuestions.length > 0 && (
                <div className="space-y-4">
                  <h4 className="font-semibold text-sm flex items-center gap-2">
                    <Target className="w-4 h-4 text-purple-600" />
                    Informa√ß√µes para Precis√£o M√°xima:
                  </h4>
                  
                  <div className="space-y-4">
                    {validationQuestions.map((question) => (
                      <div key={question.id} className="space-y-2 p-3 border rounded-lg">
                        <Label className="text-sm font-medium flex items-center gap-2">
                          {getPriorityIcon(question.priority)}
                          {question.label}
                          {question.required && (
                            <span className="text-red-500">*</span>
                          )}
                          <Badge variant="outline" className="text-xs">
                            {question.priority}
                          </Badge>
                        </Label>
                        {renderValidationInput(question)}
                      </div>
                    ))}
                  </div>

                  <Button 
                    onClick={generateFinalAnswer}
                    disabled={isLoading}
                    className="w-full bg-green-600 hover:bg-green-700"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Gerando resposta final...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Gerar Resposta Final Ultra-Precisa
                      </>
                    )}
                  </Button>
                </div>
              )}

              {/* Resposta Final */}
              {showFinalAnswer && aiResponse.finalAnswer && (
                <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                  <h4 className="font-semibold text-sm mb-3 flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    Resposta Final Ultra-Precisa:
                  </h4>
                  <div className="text-sm whitespace-pre-line mb-3" dangerouslySetInnerHTML={{ __html: formatText(aiResponse.finalAnswer) }} />
                  
                  {/* Rodap√© das Fontes - Elegante e Separado */}
                  {aiResponse.sources && aiResponse.sources.length > 0 && (
                    <div className="mt-4 pt-4 border-t border-green-200 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-3">
                      <div className="text-xs text-green-700 font-medium mb-2 flex items-center gap-2">
                        üìö Fontes Oficiais da Recomenda√ß√£o:
                  </div>
                      <div className="text-xs text-green-600 space-y-1">
                        {aiResponse.sources.map((source, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <span className="text-green-500 mt-0.5">‚Ä¢</span>
                            <span>{source}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Rodap√© Simples e Elegante */}
                  <div className="mt-4 pt-4 border-t border-green-200">
                    {/* Status de Valida√ß√£o */}
                    <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                        <Badge className="bg-green-100 text-green-800 border-green-200">
                      Alta Precis√£o Confirmada
                    </Badge>
                        <Badge variant="outline" className="text-green-700 border-green-300">
                      Validado com Dados Espec√≠ficos
                    </Badge>
                      </div>
                      
                      {/* Timestamp */}
                      <div className="text-xs text-green-600">
                        {new Date().toLocaleString('pt-BR')}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Nova Pergunta */}
              <Button 
                onClick={() => {
                  setQuestion('');
                  setAiResponse(null);
                  setValidationQuestions([]);
                  setShowFinalAnswer(false);
                  setShowDoctorsModal(false);
                  setDoctorsWorking({
                    drAnalise: { status: 'waiting', message: '' },
                    drDiagnostico: { status: 'waiting', message: '' },
                    drConduta: { status: 'waiting', message: '' },
                    drSeguranca: { status: 'waiting', message: '' }
                  });
                }}
                variant="ghost"
                className="w-full"
              >
                üîÑ Nova Consulta A.I.V.A
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>

    {/* Modal do Conselho M√©dico IA */}
    <Dialog open={showDoctorsModal} onOpenChange={setShowDoctorsModal}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-3">
            üè• <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
              AIVA - Conselho M√©dico IA
            </span>
          </DialogTitle>
        </DialogHeader>
        
        <div className="py-6">
          <div className="text-center mb-6">
            <p className="text-sm text-gray-600">
              Equipe AIVA: 4 Especialistas IA analisando seu caso cl√≠nico
            </p>
          </div>
          
          <div className="space-y-6">
            {/* DR. AN√ÅLISE */}
            <div className="flex items-center gap-4 p-4 rounded-lg border border-gray-100 bg-gray-50">
              <div className="text-2xl">üß†</div>
              <div className="flex-1">
                <div className="font-semibold text-sm">DR. AN√ÅLISE</div>
                <div className="text-xs text-gray-600 mb-2">Especialista em Completude de Dados</div>
                <div className="flex items-center gap-2">
                  {doctorsWorking.drAnalise.status === 'waiting' && (
                    <>
                      <div className="w-3 h-3 bg-gray-300 rounded-full"></div>
                      <span className="text-sm text-gray-500">Aguardando...</span>
                    </>
                  )}
                  {doctorsWorking.drAnalise.status === 'working' && (
                    <>
                      <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                      <span className="text-sm text-yellow-700">Analisando...</span>
                    </>
                  )}
                  {doctorsWorking.drAnalise.status === 'done' && (
                    <>
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm text-green-700">‚úì Conclu√≠do</span>
                    </>
                  )}
                </div>
                {doctorsWorking.drAnalise.message && (
                  <div className="text-xs text-gray-700 mt-1 italic">
                    "{doctorsWorking.drAnalise.message}"
                  </div>
                )}
              </div>
            </div>

            {/* DR. INVESTIGA√á√ÉO */}
            <div className="flex items-center gap-4 p-4 rounded-lg border border-gray-100 bg-gray-50">
              <div className="text-2xl">üîç</div>
              <div className="flex-1">
                <div className="font-semibold text-sm">DR. INVESTIGA√á√ÉO</div>
                <div className="text-xs text-gray-600 mb-2">Especialista em Questionamentos Cl√≠nicos</div>
                <div className="flex items-center gap-2">
                  {doctorsWorking.drDiagnostico.status === 'waiting' && (
                    <>
                      <div className="w-3 h-3 bg-gray-300 rounded-full"></div>
                      <span className="text-sm text-gray-500">Aguardando...</span>
                    </>
                  )}
                  {doctorsWorking.drDiagnostico.status === 'working' && (
                    <>
                      <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                      <span className="text-sm text-yellow-700">Formulando perguntas...</span>
                    </>
                  )}
                  {doctorsWorking.drDiagnostico.status === 'done' && (
                    <>
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm text-green-700">‚úì Conclu√≠do</span>
                    </>
                  )}
                </div>
                {doctorsWorking.drDiagnostico.message && (
                  <div className="text-xs text-gray-700 mt-1 italic">
                    "{doctorsWorking.drDiagnostico.message}"
                  </div>
                )}
              </div>
            </div>

            {/* DR. VALIDA√á√ÉO */}
            <div className="flex items-center gap-4 p-4 rounded-lg border border-gray-100 bg-gray-50">
              <div className="text-2xl">üë®‚Äç‚öïÔ∏è</div>
              <div className="flex-1">
                <div className="font-semibold text-sm">DR. VALIDA√á√ÉO</div>
                <div className="text-xs text-gray-600 mb-2">Especialista em Protocolos de Tratamento</div>
                <div className="flex items-center gap-2">
                  {doctorsWorking.drConduta.status === 'waiting' && (
                    <>
                      <div className="w-3 h-3 bg-gray-300 rounded-full"></div>
                      <span className="text-sm text-gray-500">Aguardando...</span>
                    </>
                  )}
                  {doctorsWorking.drConduta.status === 'working' && (
                    <>
                      <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                      <span className="text-sm text-yellow-700">Elaborando conduta...</span>
                    </>
                  )}
                  {doctorsWorking.drConduta.status === 'done' && (
                    <>
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm text-green-700">‚úì Conclu√≠do</span>
                    </>
                  )}
                </div>
                {doctorsWorking.drConduta.message && (
                  <div className="text-xs text-gray-700 mt-1 italic">
                    "{doctorsWorking.drConduta.message}"
                  </div>
                )}
              </div>
            </div>

            {/* DR. AUDITORIA */}
            <div className="flex items-center gap-4 p-4 rounded-lg border border-gray-100 bg-gray-50">
              <div className="text-2xl">‚úÖ</div>
              <div className="flex-1">
                <div className="font-semibold text-sm">DR. AUDITORIA</div>
                <div className="text-xs text-gray-600 mb-2">Especialista em Valida√ß√£o e Revis√£o</div>
                <div className="flex items-center gap-2">
                  {doctorsWorking.drSeguranca.status === 'waiting' && (
                    <>
                      <div className="w-3 h-3 bg-gray-300 rounded-full"></div>
                      <span className="text-sm text-gray-500">Aguardando...</span>
                    </>
                  )}
                  {doctorsWorking.drSeguranca.status === 'working' && (
                    <>
                      <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                      <span className="text-sm text-yellow-700">Validando seguran√ßa...</span>
                    </>
                  )}
                  {doctorsWorking.drSeguranca.status === 'done' && (
                    <>
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm text-green-700">‚úì Conclu√≠do</span>
                    </>
                  )}
                </div>
                {doctorsWorking.drSeguranca.message && (
                  <div className="text-xs text-gray-700 mt-1 italic">
                    "{doctorsWorking.drSeguranca.message}"
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Indicador de progresso */}
          <div className="mt-6 text-center">
            {Object.values(doctorsWorking).every(dr => dr.status === 'done') ? (
              <div className="text-green-600 font-medium">
                ‚úÖ An√°lise conclu√≠da! Finalizando resposta...
              </div>
            ) : (
              <div className="text-blue-600">
                üîÑ Equipe AIVA trabalhando no seu caso...
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
    </>
  );
}